from flask import Flask, render_template, request, redirect, session, flash
import os
import psycopg2
from psycopg2.extras import DictCursor
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime

app = Flask(__name__)
app.secret_key = os.environ.get("SECRET_KEY", "dev-secret-key")

if not app.secret_key:
    raise ValueError("No SECRET_KEY set for Flask application")
from urllib.parse import urlparse


def get_db_connection():
    try:
        database_url = os.environ.get('DATABASE_URL')

        print(f"üîç DEBUG: DATABASE_URL = {database_url}")

        if not database_url:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            conn = psycopg2.connect(
                host=os.environ["host"],
                user=os.environ["user"],
                password=os.environ["password"],
                port=os.environ["port"],
                dbname=os.environ["dbname"],
                client_encoding='utf-8'
            )
            print("‚úÖ Connected to local database")
            return conn

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if database_url.startswith('postgres://'):
            database_url = database_url.replace('postgres://', 'postgresql://', 1)
            print("üîç DEBUG: Fixed URL protocol")

        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        parsed_url = urlparse(database_url)
        print(f"üîç DEBUG: Database name = {parsed_url.path[1:]}")  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π /

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å SSL
        conn = psycopg2.connect(
            dsn=database_url,
            sslmode='require'
        )
        print("‚úÖ Connected to Render PostgreSQL successfully!")
        return conn

    except psycopg2.OperationalError as e:
        print(f"‚ùå Database operational error: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return None

def login_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'error')
            return redirect('/login')
        return f(*args, **kwargs)

    return decorated_function


def team_leader_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'error')
            return redirect('/login')
        if session.get('role') != 'team_leader':
            flash('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è', 'error')
            return redirect('/tasks')
        return f(*args, **kwargs)

    return decorated_function


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@app.route("/register", methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')
        role = request.form.get('role', '')

        if not username or not password or not role:
            flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
            return render_template("register.html")

        if len(username) < 3:
            flash('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞', 'error')
            return render_template("register.html")

        if len(password) < 6:
            flash('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error')
            return render_template("register.html")

        conn = get_db_connection()
        if not conn:
            flash('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error')
            return render_template("register.html")

        try:
            cur = conn.cursor(cursor_factory=DictCursor)
            cur.execute("SELECT id FROM users WHERE username = %s", (username,))
            if cur.fetchone():
                flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
                return render_template("register.html")

            password_hash = generate_password_hash(password)
            cur.execute(
                "INSERT INTO users (username, password_hash, role) VALUES (%s, %s, %s)",
                (username, password_hash, role)
            )
            conn.commit()
            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success')
            return redirect('/login')

        except psycopg2.Error as e:
            conn.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}', 'error')
            return render_template("register.html")
        finally:
            cur.close()
            conn.close()

    return render_template("register.html")


# –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
@app.route("/login", methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        password = request.form.get('password', '')

        if not username or not password:
            flash('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
            return render_template("login.html")

        conn = get_db_connection()
        if not conn:
            flash('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error')
            return render_template("login.html")

        try:
            cur = conn.cursor(cursor_factory=DictCursor)
            cur.execute("SELECT * FROM users WHERE username = %s", (username,))
            user = cur.fetchone()

            if user and check_password_hash(user['password_hash'], password):
                session['user_id'] = user['id']
                session['username'] = user['username']
                session['role'] = user['role']
                flash(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user["username"]}!', 'success')
                return redirect('/tasks')
            else:
                flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')
                return render_template("login.html")

        except psycopg2.Error as e:
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}', 'error')
            return render_template("login.html")
        finally:
            cur.close()
            conn.close()

    return render_template("login.html")


# –í—ã—Ö–æ–¥
@app.route("/logout")
def logout():
    session.clear()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info')
    return redirect('/')


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
@app.route("/main")
def main():
    return render_template("main.html")


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞—á
@app.route("/tasks")
@login_required
def tasks():
    conn = get_db_connection()
    if not conn:
        flash('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error')
        return render_template("tasks.html", tasks=[], now=datetime.now())

    try:
        cur = conn.cursor(cursor_factory=DictCursor)

        cur.execute("""
            SELECT 
                ti.id as task_info_id,
                n.id,
                n.title,
                n.preview as content,
                n.created_at,
                author.username as author_name,
                assigned_by.username as assigned_by_name,
                assigned_to.username as assigned_to_name,
                ti.assigned_to,
                ti.deadline,
                ti.status
            FROM news n
            LEFT JOIN users author ON n.author_id = author.id
            LEFT JOIN task_info ti ON n.id = ti.news_id
            LEFT JOIN users assigned_by ON ti.assigned_by = assigned_by.id
            LEFT JOIN users assigned_to ON ti.assigned_to = assigned_to.id
            ORDER BY n.created_at DESC
        """)
        tasks = cur.fetchall()

        return render_template("tasks.html", tasks=tasks, now=datetime.now())

    except psycopg2.Error as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: {e}', 'error')
        return render_template("tasks.html", tasks=[], now=datetime.now())
    finally:
        cur.close()
        conn.close()


# –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
@app.route("/complete_task/<int:task_id>", methods=['POST'])
@login_required
def complete_task(task_id):
    conn = get_db_connection()
    if not conn:
        flash('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error')
        return redirect('/tasks')

    try:
        cur = conn.cursor(cursor_factory=DictCursor)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("""
            SELECT ti.id, ti.assigned_to, n.author_id, ti.status 
            FROM task_info ti 
            JOIN news n ON ti.news_id = n.id 
            WHERE ti.id = %s
        """, (task_id,))
        task = cur.fetchone()

        if not task:
            flash('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
            return redirect('/tasks')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–ª–∏ team_leader
        can_complete = (session['user_id'] == task['assigned_to'] or
                        session['role'] == 'team_leader')

        if not can_complete:
            flash('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è', 'error')
            return redirect('/tasks')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        cur.execute(
            "UPDATE task_info SET status = 'completed' WHERE id = %s",
            (task_id,)
        )
        conn.commit()

        flash('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!', 'success')

    except psycopg2.Error as e:
        conn.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}', 'error')
    finally:
        cur.close()
        conn.close()

    return redirect('/tasks')


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è team_leader)
@app.route("/addtask", methods=['GET', 'POST'])
@login_required
@team_leader_required
def addtask():
    if request.method == 'POST':
        title = request.form.get('title', '').strip()
        task = request.form.get('task', '').strip()
        assigned_to = request.form.get('assigned_to')
        deadline = request.form.get('deadline')

        if not title or not task:
            flash('–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 'error')
            return redirect('/addtask')

        conn = get_db_connection()
        if not conn:
            flash('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error')
            return redirect('/addtask')

        try:
            cur = conn.cursor(cursor_factory=DictCursor)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ news
            cur.execute(
                "INSERT INTO news (title, preview, author_id) VALUES (%s, %s, %s) RETURNING id",
                (title, task, session['user_id'])
            )
            news_id = cur.fetchone()['id']

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –≤ task_info
            if assigned_to:
                cur.execute(
                    "INSERT INTO task_info (news_id, assigned_by, assigned_to, deadline) VALUES (%s, %s, %s, %s)",
                    (news_id, session['user_id'], assigned_to, deadline)
                )

            conn.commit()
            flash('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success')
            return redirect('/tasks')

        except psycopg2.Error as e:
            conn.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}', 'error')
            return redirect('/addtask')
        finally:
            cur.close()
            conn.close()

    else:
        # GET –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        conn = get_db_connection()
        if not conn:
            flash('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error')
            return render_template("addtask.html", users=[])

        try:
            cur = conn.cursor(cursor_factory=DictCursor)
            cur.execute("SELECT id, username FROM users WHERE role = 'crew'")
            users = cur.fetchall()
            return render_template("addtask.html", users=users)
        except psycopg2.Error as e:
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}', 'error')
            return render_template("addtask.html", users=[])
        finally:
            cur.close()
            conn.close()


@app.route("/about")
def about():
    return render_template("about.html")

